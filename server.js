require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const path = require('path');
const mongoose = require('mongoose');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const QRCode = require('qrcode');

// MongoDB Model
const TaxDetail = require('./models/TaxDetail');

// App Init
const app = express();
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Debug .env URI
console.log("ENV URI:", process.env.MONGO_URI);

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected successfully.'))
.catch(err => console.error('MongoDB connection error:', err));


// Nodemailer Setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'taxfiler24@gmail.com',
    pass: 'dmok hfwd uwrj brxh' // App password
  }
});

// Home Page
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Tax Calculation Function
function calculateTax(income) {
  let tax = 0;
  if (income > 1500000) {
    tax = (income - 1500000) * 0.30 + 100000 * 0.20 + 300000 * 0.15 + 300000 * 0.10 + 300000 * 0.05;
  } else if (income > 1200000) {
    tax = (income - 1200000) * 0.20 + 300000 * 0.15 + 300000 * 0.10 + 300000 * 0.05;
  } else if (income > 900000) {
    tax = (income - 900000) * 0.15 + 300000 * 0.10 + 300000 * 0.05;
  } else if (income > 600000) {
    tax = (income - 600000) * 0.10 + 300000 * 0.05;
  } else if (income > 300000) {
    tax = (income - 300000) * 0.05;
  }
  return tax;
}

// Email Route with PDF
app.post('/send-email', async (req, res) => {
  const { name, phone, email, salary, houseProperty, otherSources } = req.body;

  if (!name || !phone || !email || !salary || !houseProperty || !otherSources) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  const totalIncome = salary + houseProperty + otherSources;
  const tax = calculateTax(totalIncome);

  try {
    // Save to DB
    const taxDetail = new TaxDetail({
      name, phone, email, salary, houseProperty, otherSources, totalIncome, taxPayable: tax
    });
    await taxDetail.save();
    console.log('Tax details saved to DB.');

    // Create PDF Folder if not exists
    const pdfDir = path.join(__dirname, 'public', 'pdf');
    if (!fs.existsSync(pdfDir)) fs.mkdirSync(pdfDir, { recursive: true });

    const fileName = `${name.replace(/ /g, '_')}_tax_summary.pdf`;
    const pdfPath = path.join(pdfDir, fileName);
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    const stream = fs.createWriteStream(pdfPath);
    doc.pipe(stream);

    // Add Logo
    const logoPath = path.join(__dirname, 'public', 'logo.png');
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 250, 10, { width: 100 });
    }

    // Title
    doc.moveDown(3);
    doc.fontSize(18).fillColor('#0066cc').text('Income Tax Summary Report', { align: 'center' }).moveDown();

    // User Info
    doc.fontSize(12).fillColor('#000');
    const leftX = 80;
    const rightX = 300;
    let y = doc.y;

    const info = [
      ['Name', name],
      ['Email', email],
      ['Phone', phone],
      ['Salary', `Rs. ${salary.toFixed(2)}`],
      ['House Property', `Rs. ${houseProperty.toFixed(2)}`],
      ['Other Sources', `Rs. ${otherSources.toFixed(2)}`],
      ['Total Income', `Rs. ${totalIncome.toFixed(2)}`],
      ['Tax Payable', `Rs. ${tax.toFixed(2)}`]
    ];

    info.forEach(([label, value]) => {
      doc.text(`${label} :`, leftX, y);
      doc.text(value, rightX, y);
      y += 20;
    });

    // Dear Statement
    y += 30;
    doc.text(`Dear ${name}, based on your total income, you are required to pay Rs. ${tax.toFixed(2)} as income tax.`, leftX, y, {
      width: 450
    });

    // QR Code
    QRCode.toDataURL(`Name: ${name}, Tax: ₹${tax.toFixed(2)}`, (err, url) => {
      if (err) return res.status(500).json({ error: 'QR code generation failed' });

      const qrY = 570;
      const buffer = Buffer.from(url.split(',')[1], 'base64');
      doc.image(buffer, leftX, qrY, { width: 60 });

      // Date/Time
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0];
      const timeStr = now.toLocaleTimeString('en-IN', { hour12: true });

      doc.fontSize(10).fillColor('black');
      doc.text(`Date: ${dateStr}`, leftX, qrY + 65);
      doc.text(`Time: ${timeStr}`, leftX, qrY + 80);

      // Footer
      const footerY = qrY + 105;
      doc.moveTo(50, footerY).lineTo(550, footerY).strokeColor('#cccccc').stroke();

      doc.fontSize(10).fillColor('gray');
      doc.text('Generated by Tax Filter Income Tax Calculator  • www.Tax Filter.com', 50, footerY + 10, { align: 'center' });
      doc.text('Email: taxfilter@gmail.com • Phone: +91-98765-43210', 50, footerY + 25, { align: 'center' });

      doc.end();

      // Send Email After PDF Finish
      stream.on('finish', () => {
  const mailOptions = {
    from: 'taxfiler24@gmail.com',
    to: email,
    subject: 'Your Tax Calculation Summary',
    text: `Dear ${name}, please find attached your tax calculation summary.`,
    attachments: [
      {
        filename: fileName,
        path: pdfPath
      }
    ]
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('Error sending email:', error);
      return res.status(500).json({ error: 'Failed to send email' });
    } else {
      console.log('Email sent: ' + info.response);

      fs.unlink(pdfPath, (err) => {
        if (err) {
          console.error('Failed to delete PDF:', err);
        } else {
          console.log('PDF file deleted successfully.');
        }
      });

      return res.status(200).json({
        message: 'Email sent and details saved successfully!'
      });
    }
  });
});
});
} catch (err) {
    console.error('Error saving tax details:', err);
    return res.status(500).json({ error: 'Server error' });
}
});


// Start Server
const PORT = process.env.PORT || 3008;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
